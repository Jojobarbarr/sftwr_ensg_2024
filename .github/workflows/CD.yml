name: CD
on:
  push:
    tags: 'v*'
env:
  BUILD_TYPE: Release
jobs:
  build_linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Generate package
        run: |
          mkdir -p build
          cd build
          version="${GITHUB_REF##*/*/}"
          echo "{version}={$version}" >> $GITHUB_OUTPUT
          cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCPACK_PACKAGE_VERSION:STRING=$version -DCPACK_SYSTEM_NAME:STRING=linux-Release ..
          cmake --build . --config ${{env.BUILD_TYPE}}
          cmake --build . --target package
      - name: Upload
        uses: softprops/action-gh-release@v1
        with:
          files: "build/*.tar.gz"
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
  build_windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
  
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=cl
          -DCMAKE_C_COMPILER=cl
          -DCMAKE_BUILD_TYPE=Release
          -S ${{ github.workspace }}
  
      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release
  
      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config Release
      - name: Upload
        uses: softprops/action-gh-release@v1
        with:
          files: "build/*.zip"
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
